bob@bob-MS-7522:~/NoStarch/x-86/progs_working/chap14a/factorial_asm$ gdb ./threeFactorial 
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./threeFactorial...
(gdb) li factorial
11	
12	        .text
13	        .globl  factorial
14	        .type   factorial, @function
15	factorial:
16	        push    rbp             # save frame pointer
17	        mov     rbp, rsp        # set new frame pointer
18	        add     rsp, localSize  # for local var.
19	
20	        mov     n[rbp], edi     # save n
(gdb) 
21	        mov     eax, 1          # assume at base case
22	        cmp     dword ptr n[rbp], 0   # at base case?
23	        je      done                  # yes, done
24	        mov     edi, n[rbp]     # no,
25	        sub     edi, 1          #    compute (n-1)!
26	        call    factorial
27	        imul    eax, n[rbp]     # n! = n*(n-1)!
28	done:
29	        mov     rsp, rbp        # restore stack pointer
30	        pop     rbp             # and caller frame pointer
(gdb) b 26
Breakpoint 1 at 0x118c: file factorial.s, line 26.
(gdb) b 29
Breakpoint 2 at 0x1195: file factorial.s, line 29.
(gdb) r
Starting program: /home/bob/NoStarch/x-86/progs_working/chap14a/factorial_asm/threeFactorial 

Breakpoint 1, factorial () at factorial.s:26
26	        call    factorial
(gdb) i r rdi rbp rsp
rdi            0x2                 2
rbp            0x7fffffffde10      0x7fffffffde10
rsp            0x7fffffffde00      0x7fffffffde00
(gdb) x/4xg 0x7fffffffde00
0x7fffffffde00:	0x00007ffff7fb1fc8	0x00000003555551a0
0x7fffffffde10:	0x00007fffffffde30	0x0000555555555150
(gdb) cont
Continuing.

Breakpoint 1, factorial () at factorial.s:26
26	        call    factorial
(gdb) 
Continuing.

Breakpoint 1, factorial () at factorial.s:26
26	        call    factorial
(gdb) i r rdi rsb rsp
rdi            0x0                 0
Invalid register `rsb'
(gdb) i r rdi rbp rsp
rdi            0x0                 0
rbp            0x7fffffffddd0      0x7fffffffddd0
rsp            0x7fffffffddc0      0x7fffffffddc0
(gdb) x/12xg 0x7fffffffddc0
0x7fffffffddc0:	0x0000000000000000	0x0000000100000000
0x7fffffffddd0:	0x00007fffffffddf0	0x0000555555555191
0x7fffffffdde0:	0x00000000000000c2	0x00000002ffffde17
0x7fffffffddf0:	0x00007fffffffde10	0x0000555555555191
0x7fffffffde00:	0x00007ffff7fb1fc8	0x00000003555551a0
0x7fffffffde10:	0x00007fffffffde30	0x0000555555555150
(gdb) cont
Continuing.

Breakpoint 2, done () at factorial.s:29
29	        mov     rsp, rbp        # restore stack pointer
(gdb) 
Continuing.

Breakpoint 2, done () at factorial.s:29
29	        mov     rsp, rbp        # restore stack pointer
(gdb) 
Continuing.

Breakpoint 2, done () at factorial.s:29
29	        mov     rsp, rbp        # restore stack pointer
(gdb) i r rdi rbp rsp
rdi            0x0                 0
rbp            0x7fffffffddf0      0x7fffffffddf0
rsp            0x7fffffffdde0      0x7fffffffdde0
(gdb) x/8xg 0x7fffffffdde0
0x7fffffffdde0:	0x00000000000000c2	0x00000002ffffde17
0x7fffffffddf0:	0x00007fffffffde10	0x0000555555555191
0x7fffffffde00:	0x00007ffff7fb1fc8	0x00000003555551a0
0x7fffffffde10:	0x00007fffffffde30	0x0000555555555150
(gdb) cont
Continuing.

Breakpoint 2, done () at factorial.s:29
29	        mov     rsp, rbp        # restore stack pointer
(gdb) i r rdi rbp rsp
rdi            0x0                 0
rbp            0x7fffffffde10      0x7fffffffde10
rsp            0x7fffffffde00      0x7fffffffde00
(gdb) x/4xg 0x7fffffffde00
0x7fffffffde00:	0x00007ffff7fb1fc8	0x00000003555551a0
0x7fffffffde10:	0x00007fffffffde30	0x0000555555555150
(gdb) cont
Continuing.
3! = 6
[Inferior 1 (process 4221) exited normally]
(gdb) 


